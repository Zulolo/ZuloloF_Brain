
#ifndef __MOTOR_H
#define __MOTOR_H


#define MTR_SPD_CHNG_SEM_MAX		10
#define MAX_MOTOR_COMM_LENGTH		3

#ifdef __USED_BY_MOTOR__
	#define __EXTERN_MOTOR__
	#define MTR_INVALID_MOTOR_CMD		0xFFFF
	#define MTR_INVALID_MOTOR_INDEX	0xFFFF
	#define MTR_DUMMY_CMD_CONTENT		{.unMotorIndex = MTR_INVALID_MOTOR_INDEX, .unPayLoad[0] = MTR_INVALID_MOTOR_CMD}
	#define MTR_COMM_RD_CMD_CNT			2	// R(1):Address | CRC
	#define MTR_COMM_WR_CMD_CNT			4	// W(0):Address | Data Low | Data High | CRC
	#define MTR_COMM_RW_CMD_MASK		(0x8000)
	#define PWM_PERIOD 							(884-1)
	#define MIN_MOTOR_PWR_DUTY 			(100)
	#define MAX_MOTOR_PWR_DUTY 			(PWM_PERIOD - 150)
	#define MTR_SPEED_ADC_MIN				MIN_MOTOR_PWR_DUTY
	#define MTR_SPEED_ADC_MAX				MAX_MOTOR_PWR_DUTY
	#define MTR_COMM_INTVL_MIN			10	//10ms
	#define MTR_GET_RD_ITEM(RdCmd)	((RdCmd) & (~MTR_COMM_RW_CMD_MASK))
	#define IS_MTR_COMM_RD_CMD(value)	((((value) & MTR_COMM_RW_CMD_MASK) == MTR_COMM_RW_CMD_MASK) && ((value) != MTR_INVALID_MOTOR_CMD))
	#define IS_MTR_COMM_WR_CMD(value)	((((value) & MTR_COMM_RW_CMD_MASK) == 0) && ((value) != MTR_INVALID_MOTOR_CMD))
	#define DESELECT_ALL_MOTOR			HAL_GPIO_WritePin(SPI1_MOTOR_SELECT_1_GPIO_Port, SPI1_MOTOR_SELECT_1_Pin, GPIO_PIN_SET); \
										HAL_GPIO_WritePin(SPI1_MOTOR_SELECT_2_GPIO_Port, SPI1_MOTOR_SELECT_2_Pin, GPIO_PIN_SET); \
										HAL_GPIO_WritePin(SPI1_MOTOR_SELECT_3_GPIO_Port, SPI1_MOTOR_SELECT_3_Pin, GPIO_PIN_SET); \
										HAL_GPIO_WritePin(SPI1_MOTOR_SELECT_4_GPIO_Port, SPI1_MOTOR_SELECT_4_Pin, GPIO_PIN_SET); \
										HAL_GPIO_WritePin(SPI1_MOTOR_SELECT_5_GPIO_Port, SPI1_MOTOR_SELECT_5_Pin, GPIO_PIN_SET); \
										HAL_GPIO_WritePin(SPI1_MOTOR_SELECT_6_GPIO_Port, SPI1_MOTOR_SELECT_6_Pin, GPIO_PIN_SET); \
										HAL_GPIO_WritePin(SPI1_MOTOR_SELECT_7_GPIO_Port, SPI1_MOTOR_SELECT_7_Pin, GPIO_PIN_SET); \
										HAL_GPIO_WritePin(SPI1_MOTOR_SELECT_8_GPIO_Port, SPI1_MOTOR_SELECT_8_Pin, GPIO_PIN_SET)

	typedef enum {
		COMM_READ_MCR = 0,
		COMM_READ_MSR,
		COMM_READ_LOCATING_DUTY,
		COMM_READ_RAMP_UP_DUTY,
		COMM_READ_TARGET_DUTY,
		COMM_READ_ACTUAL_DUTY,
		COMM_READ_LOCATING_PERIOD,
		COMM_READ_RESERVED_1,
		COMM_READ_RAMP_UP_PERIOD_LOW,
		COMM_READ_RAMP_UP_PERIOD_HIGH,
		COMM_READ_ACTUAL_PERIOD_LOW,
		COMM_READ_ACTUAL_PERIOD_HIGH,
		COMM_READ_PHASE_CHANGE_CNT_LOW,
		COMM_READ_PHASE_CHANGE_CNT_HIGH,
		COMM_READ_RPM,
		COMM_READ_BATTERY,
		COMM_READ_CURRENT,
		COMM_READ_RESERVE_2,
		COMM_READ_MAX
	} ENUM_COMM_READ_CMD;
	
	typedef enum {
		COMM_WRITE_DUMMY = 0,
		COMM_WRITE_MOTOR_NEED_TO_RUN,
		COMM_WRITE_ROTATE_DIRECTION,
		COMM_WRITE_LOCATING_DUTY,
		COMM_WRITE_RAMP_UP_DUTY,
		COMM_WRITE_TARGET_DUTY,
		COMM_WRITE_LOCATING_PERIOD,
		COMM_WRITE_RAMP_UP_PERIOD,
		COMM_WRITE_CMD_MAX
	} ENUM_COMM_WRITE_CMD;
	
	const MOTOR_SPI_COMM_T T_MOTOR_DUMMY_CMD = MTR_DUMMY_CMD_CONTENT;
	GPIO_TypeDef* SPI1_MOTOR_SELECT_Port[] = {SPI1_MOTOR_SELECT_1_GPIO_Port, SPI1_MOTOR_SELECT_2_GPIO_Port,
			SPI1_MOTOR_SELECT_3_GPIO_Port, SPI1_MOTOR_SELECT_4_GPIO_Port,
			SPI1_MOTOR_SELECT_5_GPIO_Port, SPI1_MOTOR_SELECT_6_GPIO_Port,
			SPI1_MOTOR_SELECT_7_GPIO_Port, SPI1_MOTOR_SELECT_8_GPIO_Port};
	uint16_t SPI1_MOTOR_SELECT_Pin[] = {SPI1_MOTOR_SELECT_1_Pin, SPI1_MOTOR_SELECT_2_Pin,
			SPI1_MOTOR_SELECT_3_Pin, SPI1_MOTOR_SELECT_4_Pin,
			SPI1_MOTOR_SELECT_5_Pin, SPI1_MOTOR_SELECT_6_Pin,
			SPI1_MOTOR_SELECT_7_Pin, SPI1_MOTOR_SELECT_8_Pin};
	__IO uint8_t MTR_unMotorSelectedIndex = 0;

#else
	#define __EXTERN_MOTOR__ extern
#endif

//__EXTERN_MOTOR__ QueueHandle_t MTR_tMotorSpeedChangedSemaphore;
//__EXTERN_MOTOR__ void MTR_giveMotorSpeedADC_Sem(struct __DMA_HandleTypeDef * hdma);
__EXTERN_MOTOR__ uint16_t MTR_calculateMotorSpeedADC(void);
__EXTERN_MOTOR__ void MTR_ctrlMotor(void const * argument);
__EXTERN_MOTOR__ void MTR_unReadMotorStatus(uint8_t unMotorIndex);
__EXTERN_MOTOR__ void MTR_unUpdateMotorStatus(uint8_t unMaxMotorNum);
__EXTERN_MOTOR__ MOTOR_UNION_T MTR_tMotor[MOTOR_NUMBER];
#endif


